cbuffer staticMeshBuffer
{
	float4x4 W;
	float4x4 VP;
    matrix lightVP;
    matrix lightVP2;
};

cbuffer LightPositionBuffer
{
    float3 lightPosition;
    float padding;
    float3 lightPosition2;
    float padding2;
};

struct VS_INPUT
{
	float4 position : POS;
	float3 normal : NORMAL;
	float3 Tangent : TANGENT;
	float2 tex : TEXCOORD;
};

struct PS_INPUT
{
	float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float3 Tangent : TANGENT;
	float2 tex : TEXCOORD;
	float4 lightViewPosition  : TEXCOORD1;
    float3 lightPos : TEXCOORD2;
    float4 lightViewPosition2 : TEXCOORD3;
    float3 lightPos2 : TEXCOORD4;
};

PS_INPUT VS(VS_INPUT input)
{
	PS_INPUT output;
    float4 worldPosition;

    input.position.w = 1.0f;

	
    output.position = mul(input.position, W);
    output.position = mul(output.position, VP);
    
    output.lightViewPosition  = mul(input.position, W);
    output.lightViewPosition  = mul(output.lightViewPosition, lightVP);

    output.lightViewPosition2 = mul(input.position, W);
    output.lightViewPosition2 = mul(output.lightViewPosition2, lightVP2);


    output.tex = input.tex;
    

    output.normal = mul(input.normal, (float3x3)W);
    output.normal = normalize(output.normal);
	
	output.Tangent = mul(input.Tangent, (float3x3)W);
    output.Tangent = normalize(output.Tangent);


    worldPosition = mul(input.position, W);

    output.lightPos = lightPosition.xyz - worldPosition.xyz;
    output.lightPos = normalize(output.lightPos);

    output.lightPos2 = lightPosition2.xyz - worldPosition.xyz;
    output.lightPos2 = normalize(output.lightPos2);

    return output;
}
