cbuffer staticMeshBuffer
{
	float4x4 W;
	float4x4 VP;
    matrix lightVP;
    matrix lightVP2;
};

cbuffer LightPositionBuffer
{
    float3 lightPosition;
    float padding;
    float3 lightPosition2;
    float padding2;
};

struct VS_INPUT
{
	float4 position : POS;
	float3 normal : NORMAL;
	float3 Tangent : TANGENT;
	float2 tex : TEXCOORD;
	float3 InstancePosition : INSTANCEPOSITION;
};

struct PS_INPUT
{
	float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float3 Tangent : TANGENT;
	float2 tex : TEXCOORD;
	float4 lightViewPosition  : TEXCOORD1;
    float3 lightPos : TEXCOORD2;
    float4 lightViewPosition2 : TEXCOORD3;
    float3 lightPos2 : TEXCOORD4;
};

PS_INPUT VS(VS_INPUT input)
{
	PS_INPUT output;
    float4 worldPosition;


	// Change the position vector to be 4 units for proper matrix calculations.
    input.position.w = 1.0f;
	
	input.position.x += input.InstancePosition.x;
    input.position.y += input.InstancePosition.y;
    input.position.z += input.InstancePosition.z;

	// Calculate the position of the vertex against the world, view, and projection matrices.
    output.position = mul(input.position, W);
    output.position = mul(output.position, VP);
    
    // Calculate the position of the vertice as viewed by the light source.
    output.lightViewPosition  = mul(input.position, W);
    output.lightViewPosition  = mul(output.lightViewPosition, lightVP);

    // Calculate the position of the vertice as viewed by the second light source.
    output.lightViewPosition2 = mul(input.position, W);
    output.lightViewPosition2 = mul(output.lightViewPosition2, lightVP2);

	// Store the texture coordinates for the pixel shader.
    output.tex = input.tex;
    
    // Calculate the normal vector against the world matrix only.
    output.normal = mul(input.normal, (float3x3)W);
	
    // Normalize the normal vector.
    output.normal = normalize(output.normal);

    // Calculate the position of the vertex in the world.
    worldPosition = mul(input.position, W);

    // Determine the light position based on the position of the light and the position of the vertex in the world.
    output.lightPos = lightPosition.xyz - worldPosition.xyz;

    // Normalize the light position vector.
    output.lightPos = normalize(output.lightPos);

    // Determine the second light position based on the position of the light and the position of the vertex in the world.
    output.lightPos2 = lightPosition2.xyz - worldPosition.xyz;

    // Normalize the second light position vector.
    output.lightPos2 = normalize(output.lightPos2);

    return output;
}
